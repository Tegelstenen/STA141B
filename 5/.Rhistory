aes(x = num_char, y = run_time),
data = string_runtime
) +
geom_line(
aes(x = num_char, y = run_time),
data = predicted_df,
colour = "red"
) +
geom_point(
aes(x = num_char, y = run_time),
data = goal_point,
fill = "blue",
shape = 23,
size = 3
) +
annotate(
geom = "text",
x = 250000,
y = 100,
label = "Predicted values",
colour = "red"
) +
annotate(
geom = "text",
x = 450000,
y = goal_point[[1]],
label = "Estimated Run Time for real URL",
colour = "blue"
) +
annotate(
geom = "text",
x = 50000,
y = 25,
label = "Observed Values"
) +
labs(title = "prediction of run time for utils::URLdecode()") +
ylab("Seconds") +
xlab("Number of Characters") +
geom_point(
aes(x = num_char, y = run_time, colour = version),
data = real_df,
shape = "asterisk",
size = 2.6
) +
scale_color_hue(direction = 1) +
labs(title = "Prediciton with Real Results")
library(rvest)
library(httr)
library(ggpubr)
theme_set(theme_pubr())
library(tidyverse)
source("funs5.R")
source("debugger.R")
# Get UTF-8 Percent-Encoding ----------
response <- GET("https://www.w3schools.com/tags/ref_urlencode.ASP")
parsed_page <- read_html(response)
utf_df <- parsed_page %>%
html_elements(xpath = '//*[@id="main"]/table[1]') %>%
html_table() %>%
as.data.frame() %>%
select(-From.Windows.1252)
saveRDS(utf_df, "utf_df.rds")
# Get the Simulations ----------
sample_strings <- readRDS("sample_strings.rds")
URL_real <- readLines("PercentEncodedString.txt")
res1 <- mismatcher(utf_df)
res1
utf_df <- remapper(utf_df)
saveRDS(utf_df, "utf_df.rds")
res2 <- mismatcher(utf_df)
res2
subset_df <- utf_df %>% filter(utf_df$From.UTF.8 %in% res2[,1])
find_percent(URL_real, subset_df)
utf_df <- utf_df %>% filter(!(From.UTF.8 %in% subset_df$From.UTF.8))
saveRDS(utf_df, "utf_df.rds")
mismatcher(utf_df)
# source("tester.R")
# Loading run times ----------
r_time <- readRDS("r_time.rds")
r_time_prealoc <- readRDS("r_time_prealoc.rds")
r_time_vector <- readRDS("r_time_vector.rds")
true_original <- readRDS("r_time_real.rds")
true_preallocated <- readRDS("r_time_prealoc_real.rds")
true_vectorized <- readRDS("r_time_vector_real.rds")
#
real_URL <- readLines("PercentEncodedString.txt")
string_runtime <-
sample_strings %>%
cbind(r_time) %>%
select(-string)
model <- lm(run_time ~ I(num_char^2) - 1, data = string_runtime)
summary(model)
full_df <- data.frame(
num_char = sample_strings$num_char,
"original" = string_runtime$run_time,
"preallocated" = r_time_prealoc[[1]],
"vectorized" = r_time_vector[[1]]
) %>%
pivot_longer(
cols = c(original, preallocated, vectorized),
names_to = "version",
values_to = "run_time"
)
full_df %>%
ggplot() +
aes(x = num_char, y = run_time, colour = version) +
geom_line() +
scale_color_hue(direction = 1)
full_df %>%
filter(version != "original") %>%
ggplot() +
aes(x = num_char, y = run_time, colour = version) +
geom_line() +
scale_color_hue(direction = 1)
estimate_points <- data.frame(num_char = c(seq(
1000,
600000,
by = 1500
)))
predictions <- predict(model, newdata = estimate_points)
predicted_df <- data.frame(run_time = predictions, estimate_points)
goal_point <- data.frame(
run_time = predict(model, newdata = data.frame(num_char = 591000)),
num_char = 591000
)
true_char <- nchar(real_URL)
real_df <- data.frame(
num_char = true_char,
"original" = true_original[[1]],
"preallocated" = true_preallocated[[1]],
"vectorized" = true_vectorized[[1]]
) %>%
pivot_longer(
cols = c(original, preallocated, vectorized),
names_to = "version",
values_to = "run_time"
)
ggplot() +
geom_point(
aes(x = num_char, y = run_time),
data = string_runtime
) +
geom_line(
aes(x = num_char, y = run_time),
data = predicted_df,
colour = "red"
) +
geom_point(
aes(x = num_char, y = run_time),
data = goal_point,
fill = "blue",
shape = 23,
size = 3
) +
annotate(
geom = "text",
x = 250000,
y = 100,
label = "Predicted values",
colour = "red"
) +
annotate(
geom = "text",
x = 450000,
y = goal_point[[1]],
label = "Estimated Run Time for real URL",
colour = "blue"
) +
annotate(
geom = "text",
x = 50000,
y = 25,
label = "Observed Values"
) +
labs(title = "prediction of run time for utils::URLdecode()") +
ylab("Seconds") +
xlab("Number of Characters") +
geom_point(
aes(x = num_char, y = run_time, colour = version),
data = real_df,
shape = "asterisk",
size = 2.6
) +
scale_color_hue(direction = 1) +
labs(title = "Prediciton with Real Results")
full_df %>%
filter(version != "original") %>%
ggplot() +
aes(x = num_char, y = run_time, colour = version) +
geom_line() +
geom_point(
aes(x = num_char, y = run_time, colour = version),
data = real_df %>% filter(version != "original"),
shape = "asterisk",
size = 2.6
) +
scale_color_hue(direction = 1) +
labs(title = "observed with Final Results") +
ylab("Seconds") +
xlab("Number of Characters")
# Save the simulations to a file ----------
saveRDS(sample_strings, "sample_strings.rds")
saveRDS(r_time, "r_time.rds")
saveRDS(r_time_prealoc, "r_time_prealoc.rds")
saveRDS(r_time_vector, "r_time_vector.rds")
saveRDS(r_time_real, "r_time_real.rds")
r_time_real <- run_time(real_URL)
r_time_prealoc_real <- run_time(real_URL, FUN = URLdecode_preallocated)
r_time_vector_real <- run_time(real_URL, FUN = URLdecode_vectorized, utf_df)
# Save the simulations to a file ----------
saveRDS(sample_strings, "sample_strings.rds")
saveRDS(r_time, "r_time.rds")
saveRDS(r_time_prealoc, "r_time_prealoc.rds")
saveRDS(r_time_vector, "r_time_vector.rds")
saveRDS(r_time_real, "r_time_real.rds")
saveRDS(r_time_prealoc_real, "r_time_prealoc_real.rds")
saveRDS(r_time_vector_real, "r_time_vector_real.rds")
library(rvest)
library(httr)
library(ggpubr)
theme_set(theme_pubr())
library(tidyverse)
source("funs5.R")
source("debugger.R")
# Get UTF-8 Percent-Encoding ----------
response <- GET("https://www.w3schools.com/tags/ref_urlencode.ASP")
parsed_page <- read_html(response)
utf_df <- parsed_page %>%
html_elements(xpath = '//*[@id="main"]/table[1]') %>%
html_table() %>%
as.data.frame() %>%
select(-From.Windows.1252)
saveRDS(utf_df, "utf_df.rds")
# Get the Simulations ----------
sample_strings <- readRDS("sample_strings.rds")
URL_real <- readLines("PercentEncodedString.txt")
res1 <- mismatcher(utf_df)
res1
utf_df <- remapper(utf_df)
saveRDS(utf_df, "utf_df.rds")
res2 <- mismatcher(utf_df)
res2
subset_df <- utf_df %>% filter(utf_df$From.UTF.8 %in% res2[,1])
find_percent(URL_real, subset_df)
utf_df <- utf_df %>% filter(!(From.UTF.8 %in% subset_df$From.UTF.8))
saveRDS(utf_df, "utf_df.rds")
mismatcher(utf_df)
# source("tester.R")
# Loading run times ----------
r_time <- readRDS("r_time.rds")
r_time_prealoc <- readRDS("r_time_prealoc.rds")
r_time_vector <- readRDS("r_time_vector.rds")
true_original <- readRDS("r_time_real.rds")
true_preallocated <- readRDS("r_time_prealoc_real.rds")
true_vectorized <- readRDS("r_time_vector_real.rds")
#
real_URL <- readLines("PercentEncodedString.txt")
string_runtime <-
sample_strings %>%
cbind(r_time) %>%
select(-string)
model <- lm(run_time ~ I(num_char^2) - 1, data = string_runtime)
summary(model)
full_df <- data.frame(
num_char = sample_strings$num_char,
"original" = string_runtime$run_time,
"preallocated" = r_time_prealoc[[1]],
"vectorized" = r_time_vector[[1]]
) %>%
pivot_longer(
cols = c(original, preallocated, vectorized),
names_to = "version",
values_to = "run_time"
)
full_df %>%
ggplot() +
aes(x = num_char, y = run_time, colour = version) +
geom_line() +
scale_color_hue(direction = 1)
full_df %>%
filter(version != "original") %>%
ggplot() +
aes(x = num_char, y = run_time, colour = version) +
geom_line() +
scale_color_hue(direction = 1)
estimate_points <- data.frame(num_char = c(seq(
1000,
600000,
by = 1500
)))
predictions <- predict(model, newdata = estimate_points)
predicted_df <- data.frame(run_time = predictions, estimate_points)
goal_point <- data.frame(
run_time = predict(model, newdata = data.frame(num_char = 591000)),
num_char = 591000
)
true_char <- nchar(real_URL)
real_df <- data.frame(
num_char = true_char,
"original" = true_original[[1]],
"preallocated" = true_preallocated[[1]],
"vectorized" = true_vectorized[[1]]
) %>%
pivot_longer(
cols = c(original, preallocated, vectorized),
names_to = "version",
values_to = "run_time"
)
ggplot() +
geom_point(
aes(x = num_char, y = run_time),
data = string_runtime
) +
geom_line(
aes(x = num_char, y = run_time),
data = predicted_df,
colour = "red"
) +
geom_point(
aes(x = num_char, y = run_time),
data = goal_point,
fill = "blue",
shape = 23,
size = 3
) +
annotate(
geom = "text",
x = 250000,
y = 100,
label = "Predicted values",
colour = "red"
) +
annotate(
geom = "text",
x = 450000,
y = goal_point[[1]],
label = "Estimated Run Time for real URL",
colour = "blue"
) +
annotate(
geom = "text",
x = 50000,
y = 25,
label = "Observed Values"
) +
labs(title = "prediction of run time for utils::URLdecode()") +
ylab("Seconds") +
xlab("Number of Characters") +
geom_point(
aes(x = num_char, y = run_time, colour = version),
data = real_df,
shape = "asterisk",
size = 2.6
) +
scale_color_hue(direction = 1) +
labs(title = "Prediciton with Real Results")
full_df %>%
filter(version != "original") %>%
ggplot() +
aes(x = num_char, y = run_time, colour = version) +
geom_line() +
geom_point(
aes(x = num_char, y = run_time, colour = version),
data = real_df %>% filter(version != "original"),
shape = "asterisk",
size = 2.6
) +
scale_color_hue(direction = 1) +
labs(title = "observed with Final Results") +
ylab("Seconds") +
xlab("Number of Characters")
setwd("/Users/filipsjostrand/Documents/UC Davis/Courses/STA 141B/assignments/5")
# Source the functions ----------
source("funs5.R")
setwd("/Users/filipsjostrand/Documents/UC Davis/Courses/STA 141B/assignments/5")
# Source the functions ----------
source("funs5.R")
# Load and generate the data ----------
utf_df <- readRDS("utf_df.rds")
real_URL <- readLines("PercentEncodedString.txt")
sample_strings <- generate_strings(utf_df, max_size = 150000, step = 5000)
r_time <- run_time(sample_strings$string)
r_time_prealoc <- run_time(sample_strings$string, FUN = URLdecode_preallocated)
r_time_vector <- run_time(
sample_strings$string,
FUN = URLdecode_vectorized,
utf_df
)
r_time_vector_real <- run_time(real_URL, FUN = URLdecode_vectorized, utf_df)
saveRDS(r_time_vector, "r_time_vector.rds")
saveRDS(r_time_vector_real, "r_time_vector_real.rds")
library(rvest)
library(httr)
library(ggpubr)
theme_set(theme_pubr())
library(tidyverse)
source("funs5.R")
source("debugger.R")
# Get UTF-8 Percent-Encoding ----------
response <- GET("https://www.w3schools.com/tags/ref_urlencode.ASP")
parsed_page <- read_html(response)
utf_df <- parsed_page %>%
html_elements(xpath = '//*[@id="main"]/table[1]') %>%
html_table() %>%
as.data.frame() %>%
select(-From.Windows.1252)
saveRDS(utf_df, "utf_df.rds")
# Get the Simulations ----------
sample_strings <- readRDS("sample_strings.rds")
URL_real <- readLines("PercentEncodedString.txt")
res1 <- mismatcher(utf_df)
res1
utf_df <- remapper(utf_df)
saveRDS(utf_df, "utf_df.rds")
res2 <- mismatcher(utf_df)
res2
subset_df <- utf_df %>% filter(utf_df$From.UTF.8 %in% res2[,1])
find_percent(URL_real, subset_df)
utf_df <- utf_df %>% filter(!(From.UTF.8 %in% subset_df$From.UTF.8))
saveRDS(utf_df, "utf_df.rds")
mismatcher(utf_df)
# source("tester.R")
# Loading run times ----------
r_time <- readRDS("r_time.rds")
r_time_prealoc <- readRDS("r_time_prealoc.rds")
r_time_vector <- readRDS("r_time_vector.rds")
true_original <- readRDS("r_time_real.rds")
true_preallocated <- readRDS("r_time_prealoc_real.rds")
true_vectorized <- readRDS("r_time_vector_real.rds")
#
real_URL <- readLines("PercentEncodedString.txt")
string_runtime <-
sample_strings %>%
cbind(r_time) %>%
select(-string)
model <- lm(run_time ~ I(num_char^2) - 1, data = string_runtime)
summary(model)
full_df <- data.frame(
num_char = sample_strings$num_char,
"original" = string_runtime$run_time,
"preallocated" = r_time_prealoc[[1]],
"vectorized" = r_time_vector[[1]]
) %>%
pivot_longer(
cols = c(original, preallocated, vectorized),
names_to = "version",
values_to = "run_time"
)
test <- paste0(
sample(utf_df$From.UTF.8, 250000, replace = TRUE),
collapse = ""
)
res1 <- run_time(test, FUN = URLdecode_preallocated)
res2 <- run_time(test, FUN = URLdecode_vectorized, utf_df)
res2/res1
data.frame(
num_char = sample_strings$num_char,
"original" = string_runtime$run_time,
"preallocated" = r_time_prealoc[[1]],
"vectorized" = r_time_vector[[1]]
)
sample_strings$num_char
# -----------------------------------
# ----------Run times----------------
# -----------------------------------
setwd("/Users/filipsjostrand/Documents/UC Davis/Courses/STA 141B/assignments/5")
# Source the functions ----------
source("funs5.R")
# Load and generate the data ----------
utf_df <- readRDS("utf_df.rds")
real_URL <- readLines("PercentEncodedString.txt")
sample_strings <- generate_strings(utf_df, max_size = 150000, step = 5000)
# Run times
r_time <- run_time(sample_strings$string)
r_time_prealoc <- run_time(sample_strings$string, FUN = URLdecode_preallocated)
r_time_vector <- run_time(
sample_strings$string,
FUN = URLdecode_vectorized,
utf_df
)
r_time_real <- run_time(real_URL)
r_time_prealoc_real <- run_time(real_URL, FUN = URLdecode_preallocated)
r_time_vector_real <- run_time(real_URL, FUN = URLdecode_vectorized, utf_df)
# Save the simulations to a file ----------
saveRDS(sample_strings, "sample_strings.rds")
saveRDS(r_time, "r_time.rds")
saveRDS(r_time_prealoc, "r_time_prealoc.rds")
saveRDS(r_time_vector, "r_time_vector.rds")
saveRDS(r_time_real, "r_time_real.rds")
saveRDS(r_time_prealoc_real, "r_time_prealoc_real.rds")
saveRDS(r_time_vector_real, "r_time_vector_real.rds")
string_runtime <-
sample_strings %>%
cbind(r_time) %>%
select(-string)
model <- lm(run_time ~ I(num_char^2) - 1, data = string_runtime)
summary(model)
string_runtime <-
sample_strings %>%
cbind(r_time) %>%
select(-string)
model <- lm(run_time ~ I(num_char^2) - 1, data = string_runtime)
summary(model)
residuals <- resid(model)
plot(predict(model), residuals,
xlab = "Fitted Values", ylab = "Residuals",
main = "Residuals vs Fitted Values")
abline(h = 0, col = "red")
car::durbinWatsonTest(model)
qqnorm(residuals)
qqline(residuals)
shapiro.test(residuals)
