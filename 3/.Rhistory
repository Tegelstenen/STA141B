rx3 <- "^.*?(\\]|:)"
res3 <- parser(res2[[2]], rx3)
messages <- lapply(res3[[2]], trimws)
lapply(res3[[1]], sample, 5)
# Adding NAs
pid_app <- lapply(res3[[1]], gsub, pat = ":", repl = "[NA]")
pid_app <- lapply(pid_app, strsplit, split = "\\[|\\]", perl = T)
lapply(pid_app, sample, 2)
pid_app <- lapply(pid_app, function(x) do.call(rbind, x))
file_name <- gsub("# |\\.log", "", ll[names])
df_list <- list()
for (i in 1:5) {
df_list[[i]] <- data.frame(
`date-time` = dt[[i]],
`logging host` = log_host[[i]],
app = pid_app[[i]][,1],
PID = pid_app[[i]][,2], message = messages[[i]]
) %>% mutate(file = file_name[i])
}
df <- do.call(rbind, df_list)
nrow(df)
logic <- grepl("[0-9]+", df$PID)
table(df$PID[!logic])
df$PID <- suppressWarnings(as.numeric(df$PID))
table(df$file)
summary(df$date.time)
df <- df %>%
mutate_at(vars(file), as.factor)
tapply(df$date.time, df$file, summary)
s <- tapply(df$date.time, df$file, summary)
diffs <- Map(function(x) x[[6]] - x[[1]], s)
table(grepl("[0-9]", df$app))
df$app[grepl("[0-9]", df$app)]
tapply(df$logging.host, df$file, table)
df %>%
group_by(logging.host, app) %>%
count() %>%
arrange(logging.host, desc(n)) %>%
ungroup() %>%
group_by(logging.host) %>%
slice_max(n, n = 1) %>%
arrange(desc(n)) %>%
head(10)
valids <- matches(df$message,"(new group)|(Accepted)|(opened)|((C|c)onnection from [0-9])|(New session)|(new user)|(Server listening)|(Starting session)")
invalids <- matches(df$message,"(^Invalid)|(Did not)|(Could not)|(POSSIBLE)|(Failed password)|(input_userauth_request)|(Bad protocol version)|(Unable to negotiate)|(: authentication failure)|(Failed publickey)|^(authentication failure)|(user unknown)|(doesn't have account access)|(Failed none for)|(PAM [0-9] more)")
overload <- matches(df$message,"(many)|(maximum authentication)|(ignoring max retries)")
tot_match <- c(valids, invalids, overload)
left <- setdiff(df$message, tot_match)
closed <- matches(left,"(Bye Bye)|(session closed)|(Connection closed)|(Received disconnect)|(Disconnected from)|(reset by peer)|(Removed session)|(Close session)")
truly_left <- setdiff(left, closed)
length(left)
intersect(valids, invalids)
intersect(overload, invalids)
intersect(overload, valids)
head(valids)
tester <- matches(valids, "session opened for user")
names <- str_extract(tester, "(?<=session opened for user )([^ ]+)")
users <- unique(names)
users
any_user <- paste(users, sep="", collapse="|")
all_identified_users <- matches(valids, any_user)
users_left <- setdiff(valids, all_identified_users)
sample(users_left, 5)
ip_rx <- "[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}"
rx <- paste("(", any_user, ")", " from ", ip_rx, sep ="")
user_with_ip <- matches(all_identified_users, rx)
unique(str_extract(user_with_ip, rx))
rx <- "cyrus|news|test"
user_with_ip <- matches(all_identified_users, rx)
unique(user_with_ip)
ips <- matches(valids, ip_rx)
ips_isolated <- str_extract(ips, ip_rx)
valid_ips <- unique(ips_isolated)
valid_ips
ips <- matches(invalids, ip_rx)
ips_isolated <- str_extract(ips, ip_rx)
invalid_ip <- unique(ips_isolated)
length(invalid_ip)
head(invalid_ip)
top_attempts <- data.frame(table(ips_isolated)) %>% arrange(desc(Freq))
head(top_attempts, 10)
any(valid_ips %in% invalid_ip)
intersect(invalid_ip, valid_ips)
invalid_rx <- paste("Invalid user ([^ ]+) from ", ip_rx, sep="")
unique_invalids <- unique(matches(invalids, invalid_rx))
unique_attempts <- gsub(ip_rx, "", unique_invalids)
sample(unique_attempts, 5)
res_df <- data.frame(table(unique_attempts)) %>% arrange(desc(Freq))
head(res_df, 10)
rx <- "[0-9]{1,3}\\.[0-9]{1,3}"
res <- str_extract(invalid_ip, rx)
counts <- data.frame(table(res)) %>% arrange(desc(Freq))
head(counts, 10)
unique(str_extract(matches(unique(overload), ip_rx), ip_rx))
sudos <-
df %>%
filter(app == "sudo") %>%
select(message) %>%
unique()
sudo_command <- matches(sudos$message, "COMMAND")
rx <- "(?<=COMMAND).*$"
unique(str_extract(sudo_command, rx))
unique(str_extract(sudo_command, rx))
sudos <-
df %>%
filter(app == "sudo") %>%
select(message) %>%
unique()
sudo_command <- matches(sudos$message, "COMMAND")
rx <- "(?<=COMMAND).*$"
unique(str_extract(sudo_command, rx))
rx <- "/(?<=COMMAND).*$/"
unique(str_extract(sudo_command, rx))
sudos <-
df %>%
filter(app == "sudo") %>%
select(message) %>%
unique()
sudos <-
df %>%
filter(app == "sudo") %>%
select(message) %>%
unique()
sudo_command <- matches(sudos$message, "COMMAND")
rx <- "(?<=COMMAND).*$"
unique(str_extract(sudo_command, rx))
sudos <-
df %>%
filter(app == "sudo") %>%
select(message) %>%
unique()
sudo_command <- matches(sudos$message, "COMMAND")
rx <- "(?<=COMMAND).*"
unique(str_extract(sudo_command, rx))
rx <- "(?<=COMMAND)([^ ]+)"
unique(str_extract(sudo_command, rx))
sudos <-
df %>%
filter(app == "sudo") %>%
select(message) %>%
unique()
sudo_command <- matches(sudos$message, "COMMAND")
rx <- "(?<=COMMAND)([^ ]+)"
unique(str_extract(sudo_command, rx))
sudos
sudo_command <- matches(sudos$message, "USER=")
rx <- "(?<=USER=)([^ ]+)"
unique(str_extract(sudo_command, rx))
sudo
sudos
knitr::opts_chunk$set(echo = TRUE)
# Packages ----------
library(readr)
library(dplyr)
source("/Users/filipsjostrand/Documents/UC Davis/Courses/STA 141B/assignments/2/functions.R")
# Get Data ----------
dir <- "/Users/filipsjostrand/Documents/UC Davis/Courses/STA 141B/data/asssign2"
log_file <- file.path(dir, "MergedAuth.log")
file.exists(log_file)
ll <- suppressWarnings(readLines(log_file))
head(ll)
# Identify Pattern ----------
rx <- "^#"
names <- grepl(rx, ll)
table(names)
ll[names]
# Remove file names & create data.frames
start_index <- grep(rx, ll)
tt <- split_tables(ll, start_index)
sum(lengths(tt))
tail(tt[[1]])
# Parsing date-time ----------
rx <- "[A-Z][a-z]{2} +[0-9]{1,2} [0-9]{2}:[0-9]{2}:[0-9]{2}"
res <- parser(tt, rx)
dummy <- lapply(res[[1]], paste, "2023")
dt <- lapply(dummy, as.POSIXct, format = "%b %d %H:%M:%S %Y")
# Parsing logging host ----------
rx2 <- "^ ([a-zA-Z0-9]|-)+ "
res2 <- parser(res[[2]], rx2)
log_host <- lapply(res2[[1]], trimws)
lapply(log_host, sample, 10)
# Extracting PID and app ----------
rx3 <- "^.*?(\\]|:)"
res3 <- parser(res2[[2]], rx3)
messages <- lapply(res3[[2]], trimws)
lapply(res3[[1]], sample, 5)
# Adding NAs
pid_app <- lapply(res3[[1]], gsub, pat = ":", repl = "[NA]")
pid_app <- lapply(pid_app, strsplit, split = "\\[|\\]", perl = T)
lapply(pid_app, sample, 2)
pid_app <- lapply(pid_app, function(x) do.call(rbind, x))
file_name <- gsub("# |\\.log", "", ll[names])
df_list <- list()
for (i in 1:5) {
df_list[[i]] <- data.frame(
`date-time` = dt[[i]],
`logging host` = log_host[[i]],
app = pid_app[[i]][,1],
PID = pid_app[[i]][,2], message = messages[[i]]
) %>% mutate(file = file_name[i])
}
df <- do.call(rbind, df_list)
nrow(df)
logic <- grepl("[0-9]+", df$PID)
table(df$PID[!logic])
df$PID <- suppressWarnings(as.numeric(df$PID))
table(df$file)
summary(df$date.time)
df <- df %>%
mutate_at(vars(file), as.factor)
tapply(df$date.time, df$file, summary)
s <- tapply(df$date.time, df$file, summary)
diffs <- Map(function(x) x[[6]] - x[[1]], s)
table(grepl("[0-9]", df$app))
df$app[grepl("[0-9]", df$app)]
tapply(df$logging.host, df$file, table)
df %>%
group_by(logging.host, app) %>%
count() %>%
arrange(logging.host, desc(n)) %>%
ungroup() %>%
group_by(logging.host) %>%
slice_max(n, n = 1) %>%
arrange(desc(n)) %>%
head(10)
valids <- matches(df$message,"(new group)|(Accepted)|(opened)|((C|c)onnection from [0-9])|(New session)|(new user)|(Server listening)|(Starting session)")
invalids <- matches(df$message,"(^Invalid)|(Did not)|(Could not)|(POSSIBLE)|(Failed password)|(input_userauth_request)|(Bad protocol version)|(Unable to negotiate)|(: authentication failure)|(Failed publickey)|^(authentication failure)|(user unknown)|(doesn't have account access)|(Failed none for)|(PAM [0-9] more)")
overload <- matches(df$message,"(many)|(maximum authentication)|(ignoring max retries)")
tot_match <- c(valids, invalids, overload)
left <- setdiff(df$message, tot_match)
closed <- matches(left,"(Bye Bye)|(session closed)|(Connection closed)|(Received disconnect)|(Disconnected from)|(reset by peer)|(Removed session)|(Close session)")
truly_left <- setdiff(left, closed)
length(left)
intersect(valids, invalids)
intersect(overload, invalids)
intersect(overload, valids)
head(valids)
tester <- matches(valids, "session opened for user")
names <- str_extract(tester, "(?<=session opened for user )([^ ]+)")
users <- unique(names)
users
any_user <- paste(users, sep="", collapse="|")
all_identified_users <- matches(valids, any_user)
users_left <- setdiff(valids, all_identified_users)
sample(users_left, 5)
ip_rx <- "[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}"
rx <- paste("(", any_user, ")", " from ", ip_rx, sep ="")
user_with_ip <- matches(all_identified_users, rx)
unique(str_extract(user_with_ip, rx))
rx <- "cyrus|news|test"
user_with_ip <- matches(all_identified_users, rx)
unique(user_with_ip)
ips <- matches(valids, ip_rx)
ips_isolated <- str_extract(ips, ip_rx)
valid_ips <- unique(ips_isolated)
valid_ips
ips <- matches(invalids, ip_rx)
ips_isolated <- str_extract(ips, ip_rx)
invalid_ip <- unique(ips_isolated)
length(invalid_ip)
head(invalid_ip)
top_attempts <- data.frame(table(ips_isolated)) %>% arrange(desc(Freq))
head(top_attempts, 10)
any(valid_ips %in% invalid_ip)
intersect(invalid_ip, valid_ips)
invalid_rx <- paste("Invalid user ([^ ]+) from ", ip_rx, sep="")
unique_invalids <- unique(matches(invalids, invalid_rx))
unique_attempts <- gsub(ip_rx, "", unique_invalids)
sample(unique_attempts, 5)
res_df <- data.frame(table(unique_attempts)) %>% arrange(desc(Freq))
head(res_df, 10)
rx <- "[0-9]{1,3}\\.[0-9]{1,3}"
res <- str_extract(invalid_ip, rx)
counts <- data.frame(table(res)) %>% arrange(desc(Freq))
head(counts, 10)
unique(str_extract(matches(unique(overload), ip_rx), ip_rx))
sudos <-
df %>%
filter(app == "sudo") %>%
select(message) %>%
unique()
sudo_command <- matches(sudos$message, "COMMAND")
rx <- "(?<=COMMAND)([^ ]+)"
unique(str_extract(sudo_command, rx))
```{r}
sudo_command <- matches(sudos$message, "USER=")
rx <- "(?<=USER=)([^ ]+)"
unique(str_extract(sudo_command, rx))
install.packages("RSQLite")
library(RSQLite)
search()
ls(2)
con <- dbConnect(odbc::odbc(), "Oracle DB")
dbConnect("/Users/filipsjostrand/Documents/UC Davis/Courses/STA 141B/data/STA141B Spring 2023/cstheory.stackexchange.db")
path <- file.path()
path <- file.path("/Users/filipsjostrand/Documents/UC Davis/Courses/STA 141B/data/STA141B Spring 2023/cstheory.stackexchange.db")
path
dbConnect(path)
?`dbConnect,SQLiteConnection-method`
dbConnect()
dbConnect(SQLite(), path)
db <- dbConnect(SQLite(), path)
dbGetQuery(db, "SELECT COUNT(*) FROM cstheory.stackexchange.db")
dbGetQuery(db, "SELECT COUNT(*) FROM cstheory")
db
dbGetQuery(db, "SELECT COUNT(*) FROM db")
dbGetQuery(db, "SELECT COUNT(*) FROM")
db
names(db)
db
dbGetQuery(db, "SELECT COUNT(*) FROM cstheory.stackexchange")
dbGetQuery(db, "SELECT COUNT(*) FROM cstheory.stackexchange.db")
dbGetQuery(db, "SELECT COUNT(*) FROM cstheory")
dbGetQuery(db, ".schema")
dbGetQuery(db, "schema")
dbGetQuery(db, ".schema")
dbGetQuery(db, ".schema cstheory.stackexchange.db")
dbGetQuery(db, ".schema cstheory")
db <- dbConnect(SQLite(), path)
dbGetQuery(db, "show")
dbGetQuery(db, "show")
dbGetQuery(db, ".table")
dbGetQuery(db, ".tables")
dbGetQuery(db, ".tables")
db <- dbConnect(SQLite(), path)
dbGetQuery(db, ".tables")
dbGetQuery(db, "tables")
dbGetQuery(db, "tables")
dbGetQuery(db, ".tables")
library(RSQLite)
path <- file.path("/Users/filipsjostrand/Documents/UC Davis/Courses/STA 141B/data/STA141B Spring 2023/cstheory.stackexchange.db")
db <- dbConnect(SQLite(), path)
dbGetQuery(db, ".tables")
dbListTables(con
dbListTables(db)
db <- dbConnect(SQLite(), path)
dbListTables(db)
path <- file.path("/Users/filipsjostrand/Documents/UC Davis/Courses/STA 141B/data/STA141B Spring 2023/datascience.stackexchange.db")
db <- dbConnect(SQLite(), path)
dbListTables(db)
path <- file.path("/Users/filipsjostrand/Documents/UC Davis/Courses/STA 141B/data/STA141B Spring 2023/stats.stackexchange.db")
db <- dbConnect(SQLite(), path)
dbListTables(db)
dbGetQuery(db, "SELECT COUNT(*) from Badges")
dbGetInfo(db)
dbListTables(db)
dbListFields(db, Badges)
dbListFields(db, "Badges")
dbGetQuery(db, "SELECT Id from Badges")
library(RSQLite)
path <- file.path("/Users/filipsjostrand/Documents/UC Davis/Courses/STA 141B/data/STA141B Spring 2023/stats.stackexchange.db")
db <- dbConnect(SQLite(), path)
dbListTables(db)
dbListFields(db, "Badges")
dbGetQuery(db, "SELECT Id from Badges")
path <- file.path("/Users/filipsjostrand/Documents/UC Davis/Courses/STA 141B/data/STA141B Spring 2023/stats.stackexchange.db")
db <- dbConnect(SQLite(), path)
dbListTables(db)
dbListFields(db, "Badges")
dbGetQuery(db, "SELECT * from Badges")
dbListFields(db, "Badges")
dbGetQuery(db, "SELECT * from Badges")
path <- file.choose()
db <- dbConnect(SQLite(), path)
dbListTables(db)
path <- file.choose()
db <- dbConnect(SQLite(), path)
path <- file.choose()
db <- dbConnect(SQLite(), path)
dbListTables(db)
dbListFields(db, "salaries")
dbListTables(db)
dbListFields(db, "teams")
dbListFields(db, "salary")
dbListFields(db, "salaries")
dbListTables(db)
dbListFields(db, "salaries")
dbListTables(db)
dbListFields(db, "allstarfull")
dbListTables(db)
dbListFields(db, "people")
dbListFields(db, "people")
path
db <- dbConnect(SQLite(), path)
db <- dbConnect(SQLite(), path)
dbListTables(db)
path <- file.path("/Users/filipsjostrand/Documents/UC Davis/Courses/STA 141B/data/STA141B Spring 2023/stats.stackexchange.db")
db <- dbConnect(SQLite(), path)
dbListTables(db)
dbListFields(db, "Posts")
path <- file.path("/Users/filipsjostrand/Documents/UC Davis/Courses/STA 141B/data/STA141B Spring 2023/stats.stackexchange.db")
db <- dbConnect(SQLite(), path)
dbListTables(db)
dbListFields(db, "Posts")
dbListFields(db, "Posts")
knitr::opts_chunk$set(echo = TRUE)
library(RSQLite)
path <- file.path("/Users/filipsjostrand/Documents/UC Davis/Courses/STA 141B/data/STA141B Spring 2023/stats.stackexchange.db")
db <- dbConnect(SQLite(), path)
dbListTables(db)
dbListTables(db)
dbListFields(db, "Users")
dbListFields(db, "Users")
dbListTables(db)
knitr::opts_chunk$set(echo = TRUE)
library(RSQLite)
path <- file.path("/Users/filipsjostrand/Documents/UC Davis/Courses/STA 141B/data/STA141B Spring 2023/stats.stackexchange.db")
con <- dbConnect(SQLite(), path)
dbListTables(con)
dbListFields(con, "Users")
devtools::install_github("gadenbuie/rsthemes@fairyfloss")
devtools::install_github("gadenbuie/rsthemes@fairyfloss")
```{r}
devtools::install_github("gadenbuie/rsthemes@fairyfloss")
rsthemes::install_rsthemes()
rstudioapi::applyTheme("Fairyfloss {rsthemes}")
usethis
usethis::edit_r_profile()
goodshirt
install.packages(goodshirt)
install.packages("goodshirt")
install.packages("praise")
df
library(ggplot2)
ggplot(df, aes(x = Year, y = UserCount))
ggplot(df, aes(x = Year, y = UserCount)) +
geom_point()
ggplot(df, aes(x = Year, y = UserCount)) +
geom_smooth()
ggplot(df, aes(x = Year, y = UserCount)) +
geom_smooth(se = FALSE)
dbListTables(con)
dbListTables(con)
dbListFields(con, "PostTypeIdMap")
```{r}
knitr::opts_chunk$set(echo = TRUE)
library(RSQLite)
library(ggplot2)
path <- file.path("/Users/filipsjostrand/Documents/UC Davis/Courses/STA 141B/data/STA141B Spring 2023/stats.stackexchange.db")
con <- dbConnect(SQLite(), path)
dbListTables(con)
dbListFields(con, "Users")
dbListFields(con, "TagPosts")
dbListFields(con, "PostTypeIdMap")
dbListFields(con, "Posts")
dbListFields(con, "Posts")
dbListFields(con, "Posts")
dbListFields(con, "TagPosts")
dbListFields(con, "PostTypeIdMap")
dbListFields(con, "Posts")
install.packages("tinytex")
tinytex::reinstall_tinytex(repository = "illinois")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(RSQLite)
library(ggplot2)
library(dplyr)
path <- file.path("/Users/filipsjostrand/Documents/UC Davis/Courses/STA 141B/data/STA141B Spring 2023/stats.stackexchange.db")
con <- dbConnect(SQLite(), path)
dbListTables(con)
dbListFields(con, "Users")
ggplot(df, aes(x = Year, y = UserCount)) +
geom_smooth(se = FALSE)
dbListFields(con, "PostTypeIdMap")
dbListFields(con, "Posts")
dbListFields(con, "TagPosts")
dbListFields(con, "Users")
dbListFields(con, "Posts")
dbListFields(con, "Badges")
dbListFields(con, "PostLinks")
dbListFields(con, "Comments")
ggplot(df) +
aes(x = CommentsPerQuestion) +
geom_histogram(bins = 67L, fill = "#112446") +
theme_minimal()
ggplot(df) +
aes(x = QuestionLength) +
geom_histogram( bins = 16L, fill = "#112446") +
scale_x_continuous(trans = "log") +
theme_minimal()
ggplot(df) +
aes(x = TagCount) +
geom_histogram(bins = 10L, fill = "#112446", binwidth = .95) +
theme_minimal()
ggplot(df) +
aes(x = ResponseCount) +
geom_histogram(bins = 10L, fill = "#112446", binwidth = 1) +
theme_minimal()
cor.test(df$TagCount, log(df$QuestionLength))
cor.test(df$TagCount, df$ResponseCount, method = 'spearman')
cor.test(log(df$QuestionLength), df$ResponseCount, method = 'spearman')
dbListFields(con, "Votes")
dbListFields(con, "Badges")
dbListFields(con, "PostHistory")
dbListFields(con, "Badges")
dbListFields(con, "Posts")
dbListFields(con, "Users")
dbListFields(con, "Comments")
dbListTables(con)
ggplot(df) + geom_point()
ggplot(df) + geom_histogram()
ggplot(df) + geom_histogram(aes(x=AnswerCount))
ggplot(df) + geom_histogram(aes(x=log(AnswerCount)))
esquisse:::esquisser()
summary(df$AnswerCount)
```
ggplot(df) + geom_histogram(aes(x=AnswerCount))
summary(df$AnswerCount)
```{r}
summary(df$AnswerCount)
ggplot(df) + geom_histogram(aes(x = AnswerCount))
summary(df$AnswerCount)
